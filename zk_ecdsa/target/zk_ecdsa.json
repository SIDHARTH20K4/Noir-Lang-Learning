{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":15212863700886484067,"abi":{"parameters":[{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hashedMessage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"expected_address","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13939085540432550340":{"error_kind":"string","string":"Address does not match expected address"}}},"bytecode":"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","debug_symbols":"7Z3RaupAEIbfJdde7Mxusru+yqGUqLEEQpSoBw7iu5/UmpqOQi9a2P1h7hozXSZfC993o56LTbM6vb22/XZ3KJZ/zkW3W9fHdtePV+eCKnN98bCv+/frw7EejsWSIi+Kpt8US67MZVFs264plhVdFg+j7Ow0Wvr7KD8ZJWK6zY4/zc61l5fFuAr93irBzVe5ns4/PN2aadSy+eZBbeWnB3Xmy4M+GfZhWpt8rO7D1cfeFnRvB7p3Cbp3Bbq3B907gO4dMff2BnRvAt0b1Jce1Jce1Jce1Jce1Jce1Jce1Jce1JcB1JcB1JcB1JcB1JcB1JcB1JcB1JcB1JcB1JcB1JcR1JcR1JcR1JcR1JcR1JcR1JcR1JcR1JcR1JcR05dsMH3JBtOXbDB9yQbTl2wwfckG05dsMH3JBtOXbDB9yQbUlwTqSwL1JYH6kkB9SaC+JFBfEqgvCdSXBOpLAvUlg/qSQX3JoL5kUF8yqC8Z1JcM6ksG9SWD+pJBfWlBfWlBfWlBfWlBfWlz9SWHz3c1cbDxYe9cfWnZl58HR5rv/ThcOmtuw6Vz9z8OhSfDPlK8Dfto/Xz4SiRXE6cjkqvj0xHJtR7SEcm1S5IRcbkWTzoiubZUOiK5Vlo6Irn2XzoiTokIItqskog2qySizSqJaLNKItqsgkipzSqJaLNKItqskog2qyTilIggos0qiWizSiLarJKINqskos0qiFTarJKINqskos0qiWizSiJOiQgi2qySiDarJKLNKolos0oi2qyCSLafFpqOiDarJKLNKolos0oiTokIIk+bdfzXmbYxX4i8jBeroe269u11/s0D48t/66GtV11zu9ye+vXs7vHffroz/f5+2K2bzWlo3k+63huP/w8=","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use dep::ecrecover;\n\nfn main(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n    hashedMessage: [u8; 32],\n    expected_address: Field,\n) {\n    let address: Field = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, hashedMessage);\n    assert(address == expected_address, \"Address does not match expected address\");\n}","path":"/mnt/c/Users/91812/Desktop/Noir-Lang-Learning/zk_ecdsa/src/main.nr"},"62":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/sidharth2k04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/lib.nr"},"63":{"source":"use dep::keccak256;\nuse dep::array_helpers;\n\npub struct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    pub fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    pub fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    pub fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = keccak256::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/sidharth2k04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/secp256k1.nr"},"66":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/sidharth2k04/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}